---
# Ensure ArgoCD is working
- name: Get the ArgoCD console route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: openshift-gitops-server
    namespace: openshift-gitops
  register: r_argocd_console_route

- name: Get the ArgoCD admin password
  k8s_info:
    api_version: v1
    kind: Secret
    name: openshift-gitops-cluster
    namespace: openshift-gitops
  register: r_argocd_admin_password  

- name: Get Web Console route
  k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    namespace: openshift-console
    name: console
  register: r_console_route

- name: Get API server URL
  k8s_info:
    api_version: config.openshift.io/v1
    kind: Infrastructure
    name: cluster
  register: r_api_url

- name: Set fact for ArgoCD route
  set_fact:
    argocd_route: "{{ r_argocd_console_route | json_query(route_query) }}"
  vars:
  - route_query: resources[].spec.host|[0]

- name: Set fact for ArgoCD admin passwd
  set_fact:
    argocd_passwd: "{{ r_argocd_admin_password | json_query(secret_query) | b64decode }}"
  vars:
  - secret_query: resources[].data."admin.password"|[0]

- name: Print user info
  agnosticd_user_info:
    msg: "{{ item }}"
  loop:
  - ""
  - "Your ArgoCD console is available at:"
  - "https://{{ argocd_route }}"
  - "The admin password is: {{ argocd_passwd }}"

- name: Save user data
  agnosticd_user_info:
    data:
      argocd_route: "https://{{ r_argocd_console_route.resources[0].spec.host }}"
      argocd_adminpasswd: "{{ r_argocd_admin_password }}"
      web_console_url: "https://{{ r_console_route.resources[0].spec.host }}"
      api_url: "{{ r_api_url.resources[0].status.apiServerURL }}"

- name: Write out AWS credentials if deployed to EC2 sandbox
  when:
  - cloud_provider == 'ec2'
  - hostvars.localhost.cloudformation_out_final.stack_outputs.StudentUserAccessKey is defined
  - hostvars.localhost.cloudformation_out_final.stack_outputs.StudentUserSecretAccessKey is defined
  include_tasks: aws_credentials.yml


#### TODO: ACM, ACS, QUAY

# Leave this as the last task in the playbook.
- name: post_workload tasks complete
  debug:
    msg: "Post-Workload Tasks completed successfully."
  when: not silent|bool
